### ============================================
### END-TO-END WORKFLOW TESTS
### ============================================
### Test complete workflows integrating multiple features
### 
### Workflows Covered:
### 1. Message Reception â†’ Query â†’ AI Analysis â†’ Summarization
### 2. Multi-User Conversations â†’ Search â†’ Sentiment Analysis
### 3. Newsletter Broadcast â†’ Content Analysis
### 4. Error Handling â†’ Recovery Workflows
### 5. AI User Management â†’ Auto-Response Integration
###
### Prerequisites:
### - All previous tests passing (00-health through 05-messaging)
### - Database initialized with sample data
### - Azure OpenAI configured
### - Wasender API configured
### - At least one AI-enabled user in database
###
### Related Test Files:
### - 01-webhook.http      - Message ingestion
### - 02-messages.http     - Message queries
### - 03-ai-chat.http      - AI features
### - 04-ai-users.http     - User management
### - 05-messaging.http    - Message sending
### ============================================

@baseUrl = http://localhost
@port = 80

### === WORKFLOW 1: COMPLETE MESSAGE LIFECYCLE ===
### Test the full journey: Receive â†’ Store â†’ Query â†’ Analyze â†’ Summarize

### Step 1.1: Send initial message from user
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "workflow_test_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140000,
      "pushName": "Workflow User",
      "broadcast": false,
      "message": {
        "conversation": "I'm having trouble with my account setup. Can you help me understand the process?"
      },
      "remoteJid": "workflow_user@s.whatsapp.net",
      "id": "WORKFLOW_MSG_001"
    }
  },
  "timestamp": 1759140005000
}

###

### Step 1.2: Send follow-up message from same user
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "workflow_test_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140020,
      "pushName": "Workflow User",
      "broadcast": false,
      "message": {
        "conversation": "I've tried following the documentation but I'm still confused about the API keys."
      },
      "remoteJid": "workflow_user@s.whatsapp.net",
      "id": "WORKFLOW_MSG_002"
    }
  },
  "timestamp": 1759140025000
}

###

### Step 1.3: Query messages by session
GET {{baseUrl}}:{{port}}/messages/session/workflow_test_session_001
Content-Type: application/json

###

### Step 1.4: Analyze the conversation
POST {{baseUrl}}:{{port}}/ai/analyze-conversation
Content-Type: application/json

{
  "sessionId": "workflow_test_session_001",
  "prompt": "This user seems to be having technical difficulties. What specific help do they need and what's their emotional state?",
  "limit": 10
}

###

### Step 1.5: Generate conversation summary
POST {{baseUrl}}:{{port}}/ai/summarize
Content-Type: application/json

{
  "sessionId": "workflow_test_session_001",
  "limit": 10
}

###

### === WORKFLOW 2: MULTI-USER CONVERSATION ANALYSIS ===
### Test handling multiple users in same session with sentiment analysis

### Step 2.1: Message from User A (Positive sentiment)
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "multi_user_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140100,
      "pushName": "Alice",
      "broadcast": false,
      "message": {
        "conversation": "The new feature is amazing! I love the AI integration. ðŸŽ‰"
      },
      "remoteJid": "alice@s.whatsapp.net",
      "id": "ALICE_MSG_001"
    }
  },
  "timestamp": 1759140105000
}

###

### Step 2.2: Message from User B (Negative sentiment)
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "multi_user_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140150,
      "pushName": "Bob",
      "broadcast": false,
      "message": {
        "conversation": "I'm having issues with the AI feature. It's not responding correctly. ðŸ˜ž"
      },
      "remoteJid": "bob@s.whatsapp.net",
      "id": "BOB_MSG_001"
    }
  },
  "timestamp": 1759140155000
}

###

### Step 2.3: Message from User C (Neutral/Question)
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "multi_user_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140180,
      "pushName": "Charlie",
      "broadcast": false,
      "message": {
        "conversation": "How do I access the new AI features? Where can I find documentation?"
      },
      "remoteJid": "charlie@s.whatsapp.net",
      "id": "CHARLIE_MSG_001"
    }
  },
  "timestamp": 1759140185000
}

###

### Step 2.4: Search for AI-related messages
GET {{baseUrl}}:{{port}}/messages/search?q=AI&limit=20
Content-Type: application/json

###

### Step 2.5: Get session statistics
GET {{baseUrl}}:{{port}}/messages/stats
Content-Type: application/json

###

### Step 2.6: Analyze multi-user sentiment
POST {{baseUrl}}:{{port}}/ai/analyze-conversation
Content-Type: application/json

{
  "sessionId": "multi_user_session_001",
  "prompt": "Compare the sentiment between different users in this conversation. Who is satisfied and who is having issues? Provide recommendations.",
  "limit": 10
}

###

### === WORKFLOW 3: NEWSLETTER BROADCAST & CONTENT ANALYSIS ===
### Test newsletter processing and AI content optimization

### Step 3.1: Send newsletter message
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "newsletter_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140200,
      "broadcast": true,
      "message": {
        "conversation": "ðŸš€ Exciting News! We're launching new AI-powered features next week. Stay tuned for updates and enjoy enhanced automation capabilities!"
      },
      "remoteJid": "120363169319669622@newsletter",
      "id": "NEWSLETTER_001"
    }
  },
  "timestamp": 1759140205000
}

###

### Step 3.2: Analyze newsletter content for engagement
POST {{baseUrl}}:{{port}}/ai/chat
Content-Type: application/json

{
  "message": "Analyze this newsletter message and suggest improvements for engagement: 'ðŸš€ Exciting News! We're launching new AI-powered features next week. Stay tuned for updates and enjoy enhanced automation capabilities!'",
  "options": {
    "temperature": 0.6,
    "maxTokens": 300
  }
}

###

### Step 3.3: Generate alternative newsletter versions
POST {{baseUrl}}:{{port}}/ai/chat
Content-Type: application/json

{
  "message": "Rewrite this newsletter in 3 different styles: professional, casual, and enthusiastic. Keep it under 280 characters each: 'We're launching new AI-powered features next week with enhanced automation capabilities!'",
  "options": {
    "temperature": 0.8,
    "maxTokens": 500
  }
}

###

### === WORKFLOW 4: AI USER WHITELIST INTEGRATION ===
### Test complete AI auto-response workflow with user management

### Step 4.1: Add new user to AI whitelist
POST {{baseUrl}}:{{port}}/ai-users/add
Content-Type: application/json

{
  "remoteJid": "workflow_ai_user@s.whatsapp.net",
  "name": "Workflow AI Test User",
  "notes": "Test user for workflow integration"
}

###

### Step 4.2: Verify user was added
GET {{baseUrl}}:{{port}}/ai-users/check/workflow_ai_user@s.whatsapp.net

###

### Step 4.3: Send message from AI-enabled user (should trigger auto-response)
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "ai_workflow_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140300,
      "pushName": "Workflow AI Test User",
      "broadcast": false,
      "message": {
        "conversation": "Hello! Can you tell me about your AI capabilities?"
      },
      "remoteJid": "workflow_ai_user@s.whatsapp.net",
      "id": "AI_WORKFLOW_001"
    }
  },
  "timestamp": 1759140305000
}

###

### Step 4.4: Check conversation history
GET {{baseUrl}}:{{port}}/messages/contact/workflow_ai_user@s.whatsapp.net?limit=5

###

### Step 4.5: Get AI user details (should show updated last_interaction)
GET {{baseUrl}}:{{port}}/ai-users/workflow_ai_user@s.whatsapp.net

###

### Step 4.6: Disable AI for this user
PUT {{baseUrl}}:{{port}}/ai-users/workflow_ai_user@s.whatsapp.net/toggle

###

### Step 4.7: Send another message (should NOT trigger AI)
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "ai_workflow_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140400,
      "pushName": "Workflow AI Test User",
      "broadcast": false,
      "message": {
        "conversation": "Are you still there?"
      },
      "remoteJid": "workflow_ai_user@s.whatsapp.net",
      "id": "AI_WORKFLOW_002"
    }
  },
  "timestamp": 1759140405000
}

###

### Step 4.8: Cleanup - Remove test user
DELETE {{baseUrl}}:{{port}}/ai-users/workflow_ai_user@s.whatsapp.net/delete

###

### === WORKFLOW 5: ERROR HANDLING & RECOVERY ===
### Test system behavior under error conditions

### Step 5.1: Send malformed webhook (missing required data)
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "error_test_session"
}

###

### Step 5.2: Try to analyze non-existent session
POST {{baseUrl}}:{{port}}/ai/analyze-conversation
Content-Type: application/json

{
  "sessionId": "non_existent_session_12345",
  "prompt": "Analyze this conversation",
  "limit": 5
}

###

### Step 5.3: Send valid message to recover
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "recovery_session_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140500,
      "pushName": "Recovery User",
      "broadcast": false,
      "message": {
        "conversation": "Testing error recovery workflow"
      },
      "remoteJid": "recovery@s.whatsapp.net",
      "id": "RECOVERY_001"
    }
  },
  "timestamp": 1759140505000
}

###

### Step 5.4: Verify recovery worked
GET {{baseUrl}}:{{port}}/messages/session/recovery_session_001

###

### === WORKFLOW 6: HIGH-VOLUME MESSAGE PROCESSING ===
### Test system performance with rapid message ingestion

### Step 6.1: Rapid message 1
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "performance_test_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140600,
      "pushName": "Speed Test User",
      "remoteJid": "speed@s.whatsapp.net",
      "id": "SPEED_001",
      "message": {
        "conversation": "Performance test message #1"
      }
    }
  },
  "timestamp": 1759140605000
}

###

### Step 6.2: Rapid message 2
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "performance_test_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140610,
      "pushName": "Speed Test User",
      "remoteJid": "speed@s.whatsapp.net",
      "id": "SPEED_002",
      "message": {
        "conversation": "Performance test message #2"
      }
    }
  },
  "timestamp": 1759140615000
}

###

### Step 6.3: Rapid message 3
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "performance_test_001",
  "data": {
    "messages": {
      "messageTimestamp": 1759140620,
      "pushName": "Speed Test User",
      "remoteJid": "speed@s.whatsapp.net",
      "id": "SPEED_003",
      "message": {
        "conversation": "Performance test message #3"
      }
    }
  },
  "timestamp": 1759140625000
}

###

### Step 6.4: Query performance test results
GET {{baseUrl}}:{{port}}/messages/session/performance_test_001?limit=10

###

### Step 6.5: Test long message processing
POST {{baseUrl}}:{{port}}/webhook
Content-Type: application/json

{
  "event": "messages.received",
  "sessionId": "long_message_test",
  "data": {
    "messages": {
      "messageTimestamp": 1759140300,
      "pushName": "Verbose User",
      "broadcast": false,
      "message": {
        "conversation": "This is an extremely long message that contains a lot of information and details about various topics including technology, artificial intelligence, machine learning, natural language processing, automation, webhooks, API development, database management, and many other technical subjects that might be relevant to our discussion and analysis. The purpose of this message is to test how well the system handles longer text inputs and whether the AI analysis can effectively process and summarize content of varying lengths without performance degradation or errors."
      },
      "remoteJid": "verbose_user@s.whatsapp.net",
      "id": "LONG_MSG_001"
    }
  },
  "timestamp": 1759140305000
}

###

### Step 6.6: Analyze long message
POST {{baseUrl}}:{{port}}/ai/analyze-conversation
Content-Type: application/json

{
  "sessionId": "long_message_test",
  "prompt": "Extract key topics and themes from this lengthy message. Provide a structured analysis with bullet points.",
  "limit": 5
}

###

### ============================================
### WORKFLOW SUCCESS CRITERIA
### ============================================
###
### Workflow 1: Complete Message Lifecycle
### âœ… All messages stored successfully
### âœ… Query returns correct messages
### âœ… AI analysis provides relevant insights
### âœ… Summary is coherent and concise
###
### Workflow 2: Multi-User Analysis
### âœ… All user messages processed
### âœ… Search finds relevant content
### âœ… Sentiment analysis distinguishes user emotions
### âœ… Recommendations are actionable
###
### Workflow 3: Newsletter Processing
### âœ… Broadcast message stored correctly
### âœ… Content analysis provides useful feedback
### âœ… Alternative versions maintain message intent
###
### Workflow 4: AI User Integration
### âœ… User added to whitelist successfully
### âœ… AI auto-response triggered for enabled users
### âœ… last_interaction timestamp updated
### âœ… Toggle disables/enables AI correctly
### âœ… Disabled users don't receive AI responses
###
### Workflow 5: Error Handling
### âœ… Malformed requests return proper error codes
### âœ… System recovers gracefully from errors
### âœ… Valid requests work after error conditions
###
### Workflow 6: Performance
### âœ… Rapid messages all processed successfully
### âœ… No data loss under load
### âœ… Long messages handled correctly
### âœ… AI analysis works on complex content
###
### ============================================
### TROUBLESHOOTING
### ============================================
###
### If workflows fail:
### 1. Run health check (00-health.http)
### 2. Verify database is initialized
### 3. Check all environment variables are set
### 4. Review server logs for specific errors
### 5. Ensure previous test suites pass
### 6. Check Azure OpenAI quota/rate limits
### 7. Verify Wasender API is accessible
###
### ============================================
